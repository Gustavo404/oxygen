#!/usr/bin/expect

# Configuração das cores
set red "\033\[1;31m"
set green "\033\[0;32m"
set reset "\033\[0m"

# Funções para mensagens coloridas
proc print_error {message} {
    global red reset
    puts "${red}${message}${reset}"
}

proc print_success {message} {
    global green reset
    puts "${green}${message}${reset}"
}

proc print_info {message} {
    global reset
    puts "${reset}${message}"
}

# ...

# Verificar se o número correto de argumentos foi fornecido
if {[llength $argv] != 4} {
    print_error "Erro: Uso incorreto. Uso: $argv0 <endereço_IP_do_host> <nome_de_usuário> <senha> <nome_do_arquivo_de_comandos>"
    exit 1
}

# Obter informações de host, nome de usuário, senha e nome do arquivo de comandos dos argumentos
set host [lindex $argv 0]
set usuario [lindex $argv 1]
set senha [lindex $argv 2]
set comandos_file [lindex $argv 3]

# Ler os comandos do arquivo especificado
set comandos [exec cat $comandos_file]

# Iniciar a sessão Telnet
spawn telnet $host
expect "Login: "
send "$usuario\r"
expect "Password: "
send "$senha\r"

# Aguardar o prompt após o login
expect "User>"

# Executar comando "enable" que solicita uma senha
send "enable\r"
expect "Password:"
send "$senha\r"

# Aguardar o prompt após a autenticação "enable"
expect "#"
send "cd onu\r"

# Dividir os comandos em uma lista
set lista_comandos [split $comandos "\n"]

# Executar comandos Telnet com pausas
foreach comando $lista_comandos {
  send "$comando\r"
  expect "#"

  # Adicionar uma pausa de 5 segundos após cada comando, se necessário
  sleep 0.2
}

# Fechar a sessão Telnet
send "exit\r"
expect eof

# Exibir mensagem de conclusão
print_success "Execução do script Telnet concluída com sucesso!"


# 5 p s